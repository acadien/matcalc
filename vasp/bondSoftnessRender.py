#!/usr/bin/python

import plotRemote as pr
import sys
import pylab as pl
import numpy as np
from neighbors import neighbors
from mayavi import mlab
#mine
import procarIO
import poscarIO
import neighborIO
from struct_tools import dist_periodic,minImageAtom

#Evaluates the fukui softness functions using the local density of states

def eFermiParse(doscarFile):
    dcarF=open(doscarFile,"r")
    for i in range(5): dcarF.next() 
    return float(dcarF.next().split()[3])

def usage():
    print "procarPlot.py <PROCAR File> <DOSCAR File> <CONTCAR File> <Neighbors File>"
    print "Neighbors file is best generated by elfcarNeighbors.py"
    print "To generate the correct PROCAR make sure to have the following settings in your INCAR:\nISMEAR=0(semiconductors), 1(Metals+SIGMA)\nPREC=high\nLORBIT=11\nNPAR=1"

if len(sys.argv)!=5:
    usage()
    exit(0)

procarFile=sys.argv[1]
doscarFile=sys.argv[2]
poscarFile=sys.argv[3]
neighbsFile=sys.argv[4]

#Fermi Energy From DOSCAR
eFermi = eFermiParse(doscarFile)

#Band's and Band Energy from Procar
nIon,nGridPoints,bandGrid,occGrid = procarIO.readLDOS(procarFile)
bandGrid-=eFermi

#Ion positions from CONTCAR/POSCAR
basis,atypes,atoms,head,poscar = poscarIO.read(poscarFile)
basis=np.asarray(map(np.asarray,basis))
atoms=np.asarray(map(np.asarray,atoms))
lengths=np.asarray(map(np.linalg.norm,basis))
bounds=[[0,lengths[0]],[0,lengths[1]],[0,lengths[2]]]

#Parse Neighbors file
try:
    rcut=float(neighbsFile)
    neighbs=neighbors(atoms,bounds,rcut,style="full")
except ValueError:
    neighbs=neighborIO.read(neighbsFile)#[map(int,i.split()) for i in open(neighbsFile,"r").readlines()[1:]]

#chemical potential integral
delU = 0.1
uBounds = np.where(np.logical_and(bandGrid > -delU, bandGrid < 0))[0]
bandBounds=bandGrid[uBounds]
d= (bandBounds.max()-bandBounds.min())/len(bandBounds)

ax=atoms[:,0]
ay=atoms[:,1]
az=atoms[:,2]
types=[0]*atypes[0]
fig=mlab.figure(bgcolor=(1.0,1.0,1.0))
#

rlen=list()
soft=list()
s2=list()
mxSoft=0
mnSoft=10
mxLen=0
mnLen=10
for i in range(nIon):
    s2.append(list())
    for j in neighbs[i]:
        r=dist_periodic(atoms[i],atoms[j],lengths)

        #g(E,atomi)
        ga=occGrid[i][uBounds]
        gb=occGrid[j][uBounds]
        #soft.append(sum(ga*gb)/d/delU*2)
        soft.append(sum(ga+gb)/delU)
        s2[-1].append(sum(ga+gb)/delU)
        mxSoft=max(mxSoft,soft[-1])
        mnSoft=min(mnSoft,soft[-1])
        rlen.append(r)
        if r<3.2:
            mxLen=max(mxLen,rlen[-1])
            mnLen=min(mnLen,rlen[-1])
mnSoft,mxSoft=0.15,4.0
mnLen,mxLen = 2.40,2.9

pairs=list()
ds=list()
cs=list()
for i in range(nIon):
    d=0
    n=0
    for v,j in enumerate(neighbs[i]):
        r=dist_periodic(atoms[i],atoms[j],lengths)
        b=minImageAtom(atoms[i],atoms[j],basis)

        if r<5.0:#3.2:
            #Based on softness (blue is soft, red is not-soft)
            cSoft=(s2[i][v]-mnSoft)/(mxSoft-mnSoft)

            #Based on bond length
            cLen=(r-mnLen)/(mxLen-mnLen)

            #mlab.plot3d([atoms[i,0],b[0]],[atoms[i,1],b[1]],[atoms[i,2],b[2]],color=(1-cSoft,cSoft,cSoft),tube_radius=0.1,tube_sides=10)
            

            #mlab.plot3d([atoms[i,0],b[0]],[atoms[i,1],b[1]],[atoms[i,2],b[2]],color=(1-cLen,cLen,cLen),tube_radius=0.1,tube_sides=10)
            #mlab.plot3d([atoms[i,0],b[0]],[atoms[i,1],b[1]],[atoms[i,2],b[2]],color=(0.8,0.8,0.8),tube_radius=0.1,tube_sides=10)
            d+=cSoft
            n+=1
    if n==0:
        n=1
    d/=n
    print d,n
    ds.append(d)
    cs.append([1-d,d,d])
print min(ds),max(ds)
mlab.points3d(ax,ay,az,ds,scale_factor=1.0,scale_mode='none',resolution=20) 
    #mlab.points3d([ax[i]],[ay[i]],[az[i]],[types[i]],color=(0.3,0.3,0.7),scale_factor=1.0,scale_mode='none',resolution=20) 
print "Higher Softness corresponds to Blue (more states at the fermi energy)"
open("SOFTNESS.col","w")
mlab.plot3d([0,basis[0][0],basis[0][0],0,0],[0,0,basis[1][1],basis[1][1],0],[float(open(poscarFile).readline().split("=")[1])]*5)

mlab.show()

