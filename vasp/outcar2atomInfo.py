#!/usr/bin/python

import sys
from math import *
from scipy import array,zeros
import pylab as pl
#mine
from meanSquareDist import meanSquareDistRefAtom
from orderParam import tetrahedral,coordinationNumber
import outcarIO
#msdIO

#Calculates mean squared distance

def usage():
    print "Usage: %s <Outcar> <Reference Config #> <opt: -rcut #>"%sys.argv[0].split("/")[-1]

def outcarMeanSquareDisplaceAtom(outcarFile,refStructure=None):
    outcar=open(outcarFile,"r")
    atoms=list() #atoms[time][atom]

    #Grab ion types
    while True:
        line=outcar.readline()
        if "ions per type" in line:
            break
    atypes=map(int,line.split("=")[1].split())
    Natom=sum(atypes)

    #Grab basis vectors
    while True:
        line=outcar.readline()
        if "direct lattice vectors" in line:
            break
    basis=array([map(float,outcar.readline().split()[:3]) for i in range(3)])
    lengths=array([basis[0][0],basis[1][1],basis[2][2]])

    #Grab atom positions
    count=0
    posit=False
    for line in outcar:
        if posit:
            if "--" in line:
                if len(a)==0:
                    continue
                else:
                    #Analysis
                    atoms.append(array(a))
                    posit=False
            else:
                a.append(map(float,line.split()[:3]))
        elif "POSITION" in line:
            a=list()
            posit=True
            count+=1
    atoms=array(atoms)
    Ntime=len(atoms)

    if refStructure==None:
        delT,msdPerAtom=meanSquareDistRefAtom(atoms,0,Natom,Ntime,lengths)
    elif refStructure > Ntime:
        print "%d requested but %d structures max"%(refStructure,Ntime)
    else:
        delT,msdPerAtom=meanSquareDistRefAtom(atoms,refStructure,Natom,Ntime,lengths)

    return delT,msdPerAtom


if __name__=="__main__":
    if len(sys.argv)<2:
        usage()
        exit(0)
    
    rcut=None
    for i in range(len(sys.argv)):
        if sys.argv[i] in ["-rcut","-Rcut","-RCUT","-rCut"]:
            sys.argv.pop(i)
            try:
                rcut=float(sys.argv[i])
                sys.argv.pop(i)
            except IndexError:
                usage()
                print "Error parsing rcut args"
                exit(0)

    outcarFile=sys.argv[1]
    try:
        num=sys.argv[1].split("_")[1]
    except IndexError:
        num=None

    refStructure=None
    if len(sys.argv)==3:
        refStructure=int(sys.argv[2])
    
    #First and last configurations
    dummy,dummy,basisFirst,atomsFirst,dummy,typesFirst = outcarIO.outcarReadConfig(outcarFile,wantconfig=0)
    dummy,dummy,basisLast,atomsLast,dummy,typesLast = outcarIO.outcarReadConfig(outcarFile,wantconfig=-1)

    #MSD
    delT,msdAtom=outcarMeanSquareDisplaceAtom(outcarFile,refStructure)

    #TET    
    tetsFirst,rcutFirst=tetrahedral(atomsFirst,basisFirst,rcut=rcut)
    print "First Tetra/rcut",sum(tetsFirst)/len(tetsFirst),rcutFirst
    tetsLast,rcutLast=tetrahedral(atomsLast,basisLast,rcut=rcut)
    print "Last Tetra/rcut",sum(tetsLast)/len(tetsLast),rcutLast

    #CN
    cnFirst,rcutFirst=coordinationNumber(atomsFirst,basisFirst,rcut=rcut)
    print "First CN/rcut",float(sum(cnFirst))/len(cnFirst),rcutFirst
    cnLast,rcutLast=coordinationNumber(atomsLast,basisLast,rcut=rcut)
    print "Last CN/rcut",float(sum(cnLast))/len(cnLast),rcutLast

    wFile = open(outcarFile+".MSDatom","w")

    wFile.write("#File generated by %s\n"%sys.argv[0].split("/")[-1])
    wFile.write("#%d atoms, %5.5f timestep size, %d number of steps\n"%(len(msdAtom),delT[0],len(delT)))

    wFile.write("msd$(\AA^2)$ tetraFirst tetraLast cnFirst cnLast\n")
    wFile.writelines([str(n[-1])+" "+str(t1)+" "+str(t2)+" "+str(cn1)+" "+str(cn2)+"\n" for n,t1,t2,cn1,cn2 in zip(msdAtom,tetsFirst,tetsLast,cnFirst,cnLast)])
    wFile.close()
