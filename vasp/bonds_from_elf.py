#!/usr/bin/python

#Reads from the CHGCAR_sum generated by the sumchg.pl script
#Given some eV cutoff counts the number of charge cells that are *above* 
#that density and spits out the density as   #cells > chg / total # cells

import sys,operator,os
from numpy import *
from matplotlib import ticker
import matplotlib
#matplotlib.use('Agg') 
from matplotlib import pyplot as P
import pylab as pl
import subprocess
#mine
import poscarIO

def usage():
    print "Usage:"
    print "%s <elfcarfile> <elf cutoff [0-1]>"%sys.argv[0]
    print "Plotting Styles: 0=none, 1=chg contours, 2=vacancy contours, 3=make a bunch of plots for a movie,\n4=chg contours with atoms, 5=make a bunch of plots for a movie with spheres"
    exit(0)

if not(len(sys.argv) in [3,4]):
    usage()

elfcar = open(sys.argv[1],"r").readlines()
cutev = float(sys.argv[2])
pstyle = int(sys.argv[3])

basis,types,catoms,header,elfcar = poscarIO.read(elfcar)

elfcar.pop(0)
gridsz=[int(i) for i in elfcar.pop(0).split()]
Tot_pnts = reduce(operator.mul,gridsz)

dataset=list()
for line in elfcar:
    dataset+=[float(i) for i in line.split()]
dataset=dataset[:Tot_pnts] #chop off extra, invalid values

#Convert the dataset from charge density to vacancy
#def vval(a,b): return 1 if a<b else 0
#vacData=[vval(i,cutev) for i in dataset]
#nvacays=sum(vacData)

#Convert dataset to 3d array
dataset=array(dataset).reshape(gridsz) #[x,y,z]


x=linspace(0,basis[0][0],gridsz[0])
y=linspace(0,basis[1][1],gridsz[1])
X,Y = meshgrid(x,y)



