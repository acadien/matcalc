#!/usr/bin/python
import sys

#mine
import poscarFixScale

def outcar2poscar(outcar,outpos,wantconfig=-1,prompt=1):
    outcar = open(outcar,"r")

    wdat="This poscar generated by %s, from %s/OUTCAR\n"%(sys.argv[0],sys.argv[1])
    wdat+="1.0\n"

    count=-1
    while True:
        #Start a new configuration
        line=outcar.readline()
        if len(line)==0:
            break
        if "ions per type" in line:
            nums=line.split("=")[1].strip()
            Natoms=sum(map(int,nums.split()))
        if "FORCE on cell" in line:
            count+=1
            while True:
                line=outcar.readline()
                if "direct lattice vectors" in line:
                    line=outcar.readline()
                    v1=" ".join(line.split()[0:3])
                    line=outcar.readline()
                    v2=" ".join(line.split()[0:3])
                    line=outcar.readline()
                    v3=" ".join(line.split()[0:3])
                    break

            while True:
                line=outcar.readline()
                if "POSITION" in line:
                    outcar.readline()
                    posi=list()
                    while True:
                        line=outcar.readline()
                        posi.append(" ".join(line.split()[0:3]))
                        if len(posi)==Natoms:
                            break
                    break
            if count==wantconfig:
                break

    #Generate the rest of the poscar and write it out, make sure to correct for direct output
    if count>=0:
        wdat+=v1+"\n"
        wdat+=v2+"\n"
        wdat+=v3+"\n"
        wdat+=nums+"\n"
        wdat+="Direct\n"
        for i in posi:
            wdat+=i+"\n"
        fname="POSCAR_"+outpos
        open(fname,"w").writelines(wdat)
        poscarFixScale.poscarFixScale(fname,prompt)
    else:
        raise IOError("Unable to find desired POSCAR in OUTCAR.")

if __name__ == "__main__":
    if len(sys.argv)<3:
        print "Usage:"
        print sys.argv[0]+" <OUTCAR> <output poscar name> <desired config #, 0-indexed (default is last)>"
        exit(0)

    outcar=sys.argv[1]
    outposcar=sys.argv[2]

    if len(sys.argv)==4:
        wantconfig=int(sys.argv[3])
    else:
        wantconfig=-1 #last one by default

    outcar2poscar(outcar,outposcar,wantconfig)
