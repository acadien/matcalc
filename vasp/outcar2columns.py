#!/usr/bin/python
#Adam Cadien 2014

import subprocess
import sys

#grabs the PE,KE,T,P, and Volume from an OUTCAR and writes it to a file for easy plotting.

def usage():
    print "%s <list of outcars>"%sys.argv[0].split("/")[-1]
    print "Writes files OUTCAR.col in respective directories"


if len(sys.argv)<2:
    usage()
    exit(0)

outcarFiles = sys.argv[1:]
outputFiles = [i+".col" for i in outcarFiles]

convPress= lambda x: float(x)/10.
shellExec= lambda x: subprocess.check_output(x,shell=True).split("\n")

#example full grep usage
#subprocess.check_output("grep <word> <file>",shell=True).split("\n")
#simple usage:
#shellExec("grep <word> <file>")

#boltzmann's constant * Kelvin / AA^3 in GPa
kbKAA3=0.013806488

for ocf,outputFile in zip(outcarFiles,outputFiles):

    #natom
    natom = int(shellExec("grep NIONS\ = %s"%ocf)[0].split()[-1])

    #External Pressure
    grepResults = shellExec("grep external\ pressure %s"%ocf)
    extPressures = [convPress(i.split()[3]) for i in grepResults if len(i)>0]

    #Pressure vectors
    grepResults = shellExec("grep in\ kB %s"%ocf)
    xyz6Pressures = [map(convPress,i.split()[2:]) for i in grepResults if len(i)>0]
    xx,yy,zz,xy,xz,yz=zip(*xyz6Pressures)

    #Temperature & Kinetic Energy
    grepResults = shellExec("grep temperature %s"%ocf)
    kinEnergies = [float(i.split()[4])/natom for i in grepResults if "K)" in i]
    temperatures = [float(i.split()[-2]) for i in grepResults if "K)" in i]

    #Cohesive Energy
    grepResults = shellExec("grep free\ \ energy %s"%ocf)
    cohEnergies = [float(i.split()[4])/natom for i in grepResults if len(i)>0]
    
    #cohEnegery without TS
    grepResults = shellExec("grep energy\ \ without\ entropy %s"%ocf)
    noTSEnergies = [float(i.split()[3])/natom for i in grepResults if len(i)>0]
    
    #Volume
    grepResults = shellExec("grep volume\ of\ cell %s"%ocf)
    volumes = [float(i.split()[4])/natom for i in grepResults if len(i)>0]

    #Total Pressure
    totPressures = [extP + kbKAA3*t/v for extP,v,t in zip(extPressures,volumes,temperatures)]

    #Total Energy
    totEnergies = [ekin+ecoh for ekin,ecoh in zip(kinEnergies,cohEnergies)]

    #Enthalpy
    enthalpies = [float(e)+float(p)*float(v)*0.00624150934 for e,p,v in zip(cohEnergies,totPressures,volumes)]

    #Steps
    steps = range(len(enthalpies))

    #Writing Columns file
    #header
    data=["Column file generated by %s.\n"%(sys.argv[0].split("/")[-1]),
          "All extensive values reported as per atom.\n",
          "Temperature in K | Energy & Enthalpy in eV/atom | Volume in AA^3/atom | Pressure in GPa\n",
          "NION=%d, Init. Volume/atom = %s\n"%(natom,str(volumes[0])),
          "\n",
          "Step Temp cohEng kinEng totEng enthalpy Pressure ExtPressure Pxx Pyy Pzz Pxy Pxz Pyz\n"]
    
    data+=["\t".join(map(str,[s,t,c,k,tot,h,tp,p,xx,yy,zz,xy,xz,yz]))+"\n" \
               for s,t,c,k,tot,h,tp,p,xx,yy,zz,xy,xz,yz in \
               zip(steps,temperatures,cohEnergies,kinEnergies,totEnergies,\
                       enthalpies,totPressures,extPressures,xx,yy,zz,xy,xz,yz)]

    open(outputFile,"w").writelines(data)
    print outputFile
