#!/usr/bin/python

import sys
from itertools import permutations
#Need to make this: have embedding function vary based on density, and transfer functions linearly decrease to zero and then apply a gauge transformation. Start with a large cutoff distance, reduce as necessary.

#Choose a cutoff and number of points based on command line arguements.

def usage():
    print "Usage:"
    print "%s <output potential name> <number elements> <elem1,elem2,elem3,...elemN> <nr> <rcutoff> <nrho> <nfrho>"%sys.argv[0]
    print "Element list MUST BE IN ORDER... otherwise epic fail will ensue."
    exit()

if len(sys.argv)!=8:
    usage()

#Argument parsing
Nelems=int(sys.argv[2])
elems=sys.argv[3].split(",")
Nr=int(sys.argv[4])
rcutoff=float(sys.argv[5])
Nrho=int(sys.argv[6])
Nfrho=int(sys.argv[7])

#Columns data
columnlabels=list()
for i in range(len(elems)):
    for j in range(i,len(elems)):
        columnlabels.append(elems[i]+"-"+elems[j])
Npaircol=len(columnlabels)
columnlabels+=elems*2
Ncolumns=len(columnlabels) #Not sure how to set this quite yet

#The header
outdat="## Initial potential %s generated by geninitpot.py script.\n"%sys.argv[1]
outdat+="#F 3 %d\n"%Ncolumns
outdat+="#T EAM\n"
outdat+="#C %s\n"%" ".join(elems)
outdat+="## %s\n"%" ".join(columnlabels)
outdat+="##For #I: 0 means column of data can be altered, 1 means column is fixed\n"
outdat+="#I %s\n"%" ".join(["0"]*Ncolumns) 
outdat+="##For #G: 0 means gradient of interpolation is fixed, 1 is fixed lower end, 2 is fixed upper end, 3 means gradient is fully adjustable.\n"
outdat+="##G %s\n"%" ".join(["0"]*Ncolumns) 
outdat+="#E\n"

#Notes:
#phi - pair contribution (a&b)   #Phi(r) - (0,rcutoff,Nr)
#rho - density (a)               #rho(r) (0,rcutoff,Nrho)
#frho - embedding function (a)   #frho(rho) - (0,1,Nfrho)

#Range and spacing for phi,rho and frho columns
for i in range(Ncolumns):
    if i<Npaircol:
        outdat+="%6.6f %6.6f %d\n"%(0,rcutoff,Nr)
    elif i<Npaircol+Nelems:
        outdat+="%6.6f %6.6f %d\n"%(0,rcutoff,Nrho)
    else:
        outdat+="%6.6f %6.6f %d\n"%(0,1,Nfrho)
outdat+="\n"

#Write the phi columns
#phi=mx+500 where m=-500/Nr
for i in range(Npaircol):
    outdat+="\n".join(["%10.10e"%(j*-500.0/(Nr-1)+500.0) for j in range(Nr)])
    outdat+="\n\n"

#Write the rho columns
#rho=mx+300 where m=-300/Nrho
for i in range(Nelems):
    outdat+="\n".join(["%10.10e"%(j*-300.0/(Nrho-1)+300.0) for j in range(Nrho)])
    outdat+="\n\n"

#Write the frho columns
#frho=20rho^2 - 18rho -1 satisfies (rho,frho)=(0,-1),(0.5,-5),(1,1)
for i in range(Nelems):
    outdat+="\n".join(["%10.10e"%(20.0*(float(j)/(Nfrho-1))**2-18.0*float(j)/(Nfrho-1)-1.0) for j in range(Nfrho)])
    if i==Nelems-1:
        outdat+="\n"
    else:
        outdat+="\n\n"

outfile=open(sys.argv[1],"w")
outfile.write(outdat)
outfile.close()
print "Everything is alright.  It ain't that bad.  It ain't that tight, so I'm not that sad."


